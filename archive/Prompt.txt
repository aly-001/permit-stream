My current code works great. It's an electron react app that lets you fill 
enmax permits quickly.

The only thing I need to implement is uploading documents to the service.
As you'll see, in my current ContactContext has dummy files, instead of actual ones.
I've also got some working code that does something similar (gather some contacts and then have a button to download them and then retrieve the file path)
I need to be able to use those ideas in my curent ContactContext and JobNimbusService to be able to 
replace the dummy file data with actual file URLs. That way, they can be used in my permit automator commitHookEffectListMount

Below are the files I referenced

CURRENT JOBNIMBUS SERVICE

const { ipcRenderer } = window.require('electron');

class JobNimbusService {
  constructor(apiToken) {
    this.config = {
      apiToken,
      baseUrl: 'https://app.jobnimbus.com/api1'
    };
  }

  async request(endpoint, options = {}) {
    try {
      const response = await ipcRenderer.invoke('api-request', {
        url: `${this.config.baseUrl}${endpoint}`,
        options: {
          ...options,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.config.apiToken}`
          }
        }
      });
      
      if (!response.ok) {
        throw new Error(`API Error: ${response.statusText}`);
      }
      
      return response.data;
    } catch (error) {
      console.error('API Request failed:', error);
      throw error;
    }
  }

  async getContacts() {
    return this.request('/contacts');
  }

  async getContactById(contactId) {
    return this.request(`/contacts/${contactId}`);
  }

  async getContactDocuments(contactId) {
    return this.request(`/files?grid=document&webui=yes&fields=content_type,filename,jnid,esign,size,pages,date_updated,related,description,date_created,date_file_created,record_type_name,created_by_name,created_by,report&related=${contactId}`);
  }

  getDocumentDownloadUrl(documentId) {
    return `${this.config.baseUrl}/files/${documentId}?download=1`;
  }

  async downloadDocument(documentId, fileName) {
    try {
      const downloadUrl = this.getDocumentDownloadUrl(documentId);
      const filePath = await ipcRenderer.invoke('download-file', {
        url: downloadUrl,
        fileName,
        headers: {
          Authorization: `Bearer ${this.config.apiToken}`
        }
      });
      return filePath;
    } catch (error) {
      console.error(`Error downloading document ${fileName}:`, error);
      throw error;
    }
  }
}

export default JobNimbusService;

CURRENT CONTACT CONTEXT

import React, { createContext, useState, useContext, useEffect } from 'react';
import JobNimbusService from '../services/JobNimbusService';

const ContactContext = createContext();

const processContact = (rawContact) => {
  // Calculate month offset and day from estimated install date
  const calculatePlannedDate = (timestamp) => {
    if (!timestamp) return { month_offset: 3, day: 15 }; // Default values if no timestamp

    const currentDate = new Date();
    const installDate = new Date(timestamp * 1000); // Convert Unix timestamp to milliseconds

    // Calculate months between dates
    let monthOffset = (installDate.getFullYear() - currentDate.getFullYear()) * 12 + 
                     (installDate.getMonth() - currentDate.getMonth());
    
    // If monthOffset is negative, default to 3
    monthOffset = monthOffset < 0 ? 3 : monthOffset;

    return {
      month_offset: monthOffset,
      day: installDate.getDate()
    };
  };

  const plannedDate = calculatePlannedDate(rawContact['Est Install Date'] || rawContact.cf_date_1);

  return {
    id: rawContact.recid,
    site_id: rawContact.Site_ID || rawContact.cf_string_11 || "",
    planned_date: plannedDate,
    city: rawContact.city || "cat",
    postal_code: rawContact.zip || "cat",
    current_energy_consumption: rawContact.Consumption_Kwh?.toString() || rawContact.cf_double_2?.toString() || "",
    projected_energy_production: rawContact.Production_kWh?.toString() || rawContact.cf_double_3?.toString() || "",
    energy_source: "Solar",
    generator_type: "Synchronous",
    ac_capacity: rawContact.KW_DC?.toString() || rawContact.cf_double_4?.toString() || "",
    required_documents: [
      "Electrical single-line diagram",
      "Site plan",
      "Inverter specification",
      "Solar panel specifications",
      "Bidirectional meter installation acknowledgement",
    ],
    documents: [
      {
        filename: "sample-diagram.pdf",
        downloadUrl: "file:///Users/username/Documents/SolarApp/customer-files/sample-diagram.pdf",
        contentType: "application/pdf",
      },
      {
        filename: "site-plan.pdf",
        downloadUrl: "file:///Users/username/Documents/SolarApp/customer-files/site-plan.pdf",
        contentType: "application/pdf",
      },
      {
        filename: "inverter-specs.pdf",
        downloadUrl: "file:///Users/username/Documents/SolarApp/customer-files/inverter-specs.pdf",
        contentType: "application/pdf",
      }
    ],
    contact: {
      name: rawContact.display_name || "cat",
      phone: rawContact.home_phone || rawContact.mobile_phone || rawContact.work_phone || "",
      email: rawContact.email || "cat",
      preferred_method: "email",
    },
  };
};

export function ContactProvider({ children }) {
  const [contacts, setContacts] = useState([]);
  const [currentContact, setCurrentContact] = useState(null);
  const [display, setDisplay] = useState('info');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredContacts, setFilteredContacts] = useState([]);

  const jobNimbusService = new JobNimbusService("m2ud7n7j67nzk6x0");

  useEffect(() => {
    const fetchContacts = async () => {
      try {
        const response = await jobNimbusService.getContacts();
        
        console.log('Raw Contact Data:', response.results);

        const contactsData = response.results.map(contact => processContact(contact));

        const sortedContacts = contactsData.sort((a, b) => b.date_created - a.date_created);
        setContacts(sortedContacts);
        setFilteredContacts(sortedContacts);
        setCurrentContact(sortedContacts[0]);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching contacts:', err);
        setError(err.message);
        setLoading(false);
      }
    };

    fetchContacts();
  }, []);

  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredContacts(contacts);
      return;
    }

    const filtered = contacts.filter(contact => 
      contact.contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.contact.email.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredContacts(filtered);
  }, [searchTerm, contacts]);

  return (
    <ContactContext.Provider 
      value={{ 
        contacts,
        filteredContacts,
        setContacts, 
        currentContact, 
        setCurrentContact,
        display,
        setDisplay,
        loading,
        error,
        searchTerm,
        setSearchTerm
      }}
    >
      {children}
    </ContactContext.Provider>
  );
}

export function useContacts() {
  const context = useContext(ContactContext);
  if (!context) {
    throw new Error('useContacts must be used within a ContactProvider');
  }
  return context;
}

OLD WORKING JOBNIMBUS FILE DOWNLOADER

import React, { useState, useEffect } from "react";
import JobNimbusService from "./JobNimbusService";
import { ipcRenderer } from 'electron';

const JobNimbusFileDownloader = () => {
  const [contacts, setContacts] = useState([]);
  const [documents, setDocuments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [downloadedFiles, setDownloadedFiles] = useState({});
  const [localFiles, setLocalFiles] = useState({});

  const jobNimbus = new JobNimbusService("m2ud7n7j67nzk6x0");

  useEffect(() => {
    console.log('Component mounted, initiating document load');
    loadAllDocuments();
  }, []);

  const loadAllDocuments = async () => {
    console.log('Starting loadAllDocuments');
    try {
      setLoading(true);
      const contactsResponse = await jobNimbus.getContacts();
      console.log('Contacts fetched:', contactsResponse.results.length, 'contacts');
      setContacts(contactsResponse.results);

      const allDocs = [];
      for (const contact of contactsResponse.results) {
        console.log(`Fetching documents for contact: ${contact.jnid}`);
        try {
          const docs = await jobNimbus.getContactDocuments(contact.jnid);
          console.log(`Retrieved ${docs.files?.length || 0} documents for contact ${contact.jnid}`);
          if (docs.files) {
            const docsWithContact = docs.files.map(doc => ({
              ...doc,
              contactName: contact.display_name || `${contact.first_name} ${contact.last_name}` || contact.company
            }));
            allDocs.push(...docsWithContact);
          }
        } catch (docErr) {
          console.error(`Failed to get documents for contact ${contact.jnid}:`, docErr);
        }
      }
      console.log('Total documents retrieved:', allDocs.length);
      setDocuments(allDocs);
    } catch (err) {
      console.error('Failed to load documents:', err);
      setError("Failed to load documents");
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = async (documentId, fileName) => {
    console.log(`Starting download for document ${documentId} (${fileName})`);
    try {
      setLoading(true);
      const downloadUrl = jobNimbus.getDocumentDownloadUrl(documentId);
      console.log('Download URL generated:', downloadUrl);

      console.log('Initiating download through IPC');
      const localPath = await ipcRenderer.invoke('download-file', {
        url: downloadUrl,
        fileName,
        headers: {
          Authorization: `Bearer ${jobNimbus.config.apiToken}`,
        }
      });
      console.log('File downloaded successfully to:', localPath);

      setLocalFiles(prev => ({
        ...prev,
        [documentId]: localPath
      }));

      return localPath;
    } catch (err) {
      console.error('Download failed:', err);
      setError(`Failed to download document: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const downloadAllDocuments = async () => {
    console.log('Starting batch download of all documents');
    setLoading(true);
    try {
      const downloadPromises = documents.map(doc => {
        console.log(`Queueing download for ${doc.filename} (${doc.jnid})`);
        return handleDownload(doc.jnid, doc.filename);
      });
      const results = await Promise.all(downloadPromises);
      console.log('Batch download completed:', results);
    } catch (err) {
      console.error('Batch download failed:', err);
      setError(`Failed to download all documents: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-downloader">
      {loading && <div className="loading">Loading documents...</div>}
      {error && <div className="error">{error}</div>}

      <div className="documents-grid">
        {documents.map((doc) => (
          <div key={doc.jnid} className="document-card">
            <div className="document-info">
              <span className="document-name">{doc.filename}</span>
              <div className="document-details">
                <span>{(doc.size / 1024 / 1024).toFixed(2)} MB • {doc.pages} pages</span>
                <span className="document-date">
                  {new Date(doc.date_created * 1000).toLocaleDateString()}
                </span>
                <span className="contact-name">Contact: {doc.contactName}</span>
              </div>
            </div>
            <div className="document-actions">
              <button
                onClick={() => handleDownload(doc.jnid, doc.filename)}
                className="download-button"
              >
                Download
              </button>
              {localFiles[doc.jnid] && (
                <div className="file-path">
                  Local file: {localFiles[doc.jnid]}
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      <style>{`
        .file-downloader {
          padding: 20px;
          max-width: 800px;
          margin: 0 auto;
        }

        .loading, .error {
          text-align: center;
          margin: 20px 0;
        }

        .error {
          color: red;
        }

        .documents-grid {
          display: grid;
          gap: 16px;
          margin-top: 16px;
        }

        .document-card {
          background: white;
          padding: 16px;
          border-radius: 6px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          display: flex;
          justify-content: space-between;
          align-items: center;
        }

        .document-info {
          flex-grow: 1;
          margin-right: 16px;
        }

        .document-name {
          font-weight: bold;
          display: block;
          margin-bottom: 8px;
        }

        .document-details {
          color: #666;
          font-size: 0.9em;
        }

        .document-details span {
          display: block;
        }

        .contact-name {
          font-style: italic;
        }

        .download-button {
          background-color: #007bff;
          color: white;
          border: none;
          padding: 8px 16px;
          border-radius: 4px;
          cursor: pointer;
          transition: background-color 0.2s;
        }

        .download-button:hover {
          background-color: #0056b3;
        }
      `}</style>
    </div>
  );
};

export default JobNimbusFileDownloader;


OLD WORKING JOB NIMBUS SERVICE

 const { ipcRenderer } = window.require('electron');

class JobNimbusService {
  constructor(apiToken) {
    this.config = {
      apiToken,
      baseUrl: 'https://app.jobnimbus.com/api1'
    };
  }

  async request(endpoint, options = {}) {
    try {
      const response = await ipcRenderer.invoke('api-request', {
        url: `${this.config.baseUrl}${endpoint}`,
        options: {
          ...options,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.config.apiToken}`
          }
        }
      });
      
      if (!response.ok) {
        throw new Error(`API Error: ${response.statusText}`);
      }
      
      return response.data;
    } catch (error) {
      console.error('API Request failed:', error);
      throw error;
    }
  }

  async getContacts() {
    return this.request('/contacts');
  }

  async getContactById(contactId) {
    return this.request(`/contacts/${contactId}`);
  }

  async getContactDocuments(contactId) {
    const response = await this.request(`/files?grid=document&webui=yes&fields=content_type,filename,jnid,esign,size,pages,date_updated,related,description,date_created,date_file_created,record_type_name,created_by_name,created_by,report&related=${contactId}`);
    console.log('Documents response:', response);
    return response;
  }

  getDocumentDownloadUrl(documentId) {
    return `${this.config.baseUrl}/files/${documentId}`;
  }
}

export default JobNimbusService;

